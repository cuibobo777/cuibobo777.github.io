import{_ as e,o as i,c as a,Q as f}from"./chunks/framework.88dbb1e2.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"posts/web/vue/v_001_diff _vue_react.md","filePath":"posts/web/vue/v_001_diff _vue_react.md","lastUpdated":1716980833000}'),t={name:"posts/web/vue/v_001_diff _vue_react.md"},l=f('<h2 id="react-vue2-vue3-diff-算法的区别" tabindex="-1">React, vue2, vue3 Diff 算法的区别 <a class="header-anchor" href="#react-vue2-vue3-diff-算法的区别" aria-label="Permalink to &quot;React, vue2, vue3 Diff 算法的区别&quot;">​</a></h2><h4 id="react-diff" tabindex="-1">React Diff <a class="header-anchor" href="#react-diff" aria-label="Permalink to &quot;React Diff&quot;">​</a></h4><p>React 是 Fiber 架构的， Fiber 是一个链表的机构，但是没有设置反向指针，所以没有使用双端对比的方式去优化 Diff 算法 (ps: 在没有反向指针的情况下，从右往左遍历链表很困难)。</p><p>使用 Fiber 架构的原因是实现异步，不阻断页面的渲染。</p><p>由于 React 无法使用双端对比放方法来优化 Diff ，所以在进行多节点 Diff 的时候需要进行两轮遍历。</p><ol><li>处理<code>更新</code>的节点</li><li>处理剩下不属于<code>更新</code>的节点</li></ol><p>React 多节点的 Diff 算法的实现在 <code>reconcileChildrenArray</code> 函数中</p><h4 id="vue2-diff" tabindex="-1">vue2 Diff <a class="header-anchor" href="#vue2-diff" aria-label="Permalink to &quot;vue2 Diff&quot;">​</a></h4><p>Vue2 采用了双端 Diff 算法，算法流程主要是：</p><ol><li>对比头头、尾尾、头尾、尾头是否可以复用，如果可以复用，就进行节点的更新或移动操作。</li><li>如果经过四个端点的比较，都没有可复用的节点，则将就的子序列保存为节点 key 为 key ，index 为 value 的 map 。</li><li>拿新的一组子节点的头部节点去 map 中查找，如果找到可复用的节点，则将相应的节点进行更新，并将其移动到头部，然后头部指针右移。</li><li>然而，拿新的一组子节点中的头部节点去旧的一组子节点中寻找可复用的节点，并非总能找到，这说明这个新的头部节点是新增节点，只需要将其挂载到头部即可。</li><li>经过上述处理，最后还剩下新的节点就批量新增，剩下旧的节点就批量删除。</li></ol><h4 id="区别" tabindex="-1">区别 <a class="header-anchor" href="#区别" aria-label="Permalink to &quot;区别&quot;">​</a></h4><p>Vue2 的 Diff 与 React 的 Diff 主要区别为：</p><ol><li>Vue2 采用双端比对的方式优化了 Diff 算法，而 React 由于是 Fiber 架构，是单链表，没有使用双端比对的方式优化</li><li>Vue2 在 Diff 的时候与 React 在 Diff 的时候都采用了 map 来加快查找的效率，但是 Vue2 构造的 Diff 是 <code>key</code> -&gt; <code>index</code> 的映射，而 React 构造的 Diff 是 <code>key</code> -&gt; <code>Fiber节点</code> 的映射。</li></ol><h3 id="vue3-diff" tabindex="-1">Vue3 Diff <a class="header-anchor" href="#vue3-diff" aria-label="Permalink to &quot;Vue3 Diff&quot;">​</a></h3><p>Vue3 的 Diff 算法与 Vue2 的 Diff 算法一样，也会先进行双端比对，只是双端比对的方式不一样。Vue3 的 Diff 算法借鉴了字符串比对时的双端比对方式，即优先处理可复用的前置元素和后置元素。</p><p>Vue3 的 Diff 算法的流程如下</p><ol><li>处理前置节点</li><li>处理后置节点</li><li>新节点有剩余，则挂载剩余的新节点</li><li>旧节点有剩余，则卸载剩余的旧节点</li><li>乱序情况（新、旧节点都有剩余），则构建最长递增子序列</li><li>节点在最长递增子序列中，则该节点不需移动</li><li>节点不在最长递增子序列中，则移动该节点</li></ol>',17),o=[l];function c(r,d,u,_,s,n){return i(),a("div",null,o)}const v=e(t,[["render",c]]);export{h as __pageData,v as default};
