import{_ as e,c as a,o as r,a2 as o}from"./chunks/framework.DSGGXnHx.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"posts/web/browser/b_001_browserRendering.md","filePath":"posts/web/browser/b_001_browserRendering.md","lastUpdated":1717747339000}'),t={name:"posts/web/browser/b_001_browserRendering.md"},p=o('<h2 id="浏览器渲染原理" tabindex="-1">浏览器渲染原理 <a class="header-anchor" href="#浏览器渲染原理" aria-label="Permalink to &quot;浏览器渲染原理&quot;">​</a></h2><h3 id="渲染的时间点" tabindex="-1">渲染的时间点 <a class="header-anchor" href="#渲染的时间点" aria-label="Permalink to &quot;渲染的时间点&quot;">​</a></h3><p>浏览器的网络下线程收到HTML文档后，会产生一个渲染任务，并将其传递给渲染主线程的的消息队列。</p><p>然后在事件循环机制下，渲染主线程取出消息队列中的渲染任务，开始渲染流程。</p><hr><p>整个渲染流程分为多个阶段，分别是： HTML解析，样式计算，布局，分层，分块，光栅化，画。每个阶段都有明确的输入输出，上一个阶段的输出会成为下一个阶段的输入。</p><p><img src="https://gitee.com/cuibobo777/myPic/raw/master/img/202311301950305.png" alt="image-20231130195035253"></p><hr><h4 id="渲染的第一步是解析html。" tabindex="-1">渲染的第一步是解析HTML。 <a class="header-anchor" href="#渲染的第一步是解析html。" aria-label="Permalink to &quot;渲染的第一步是解析HTML。&quot;">​</a></h4><p>解析过程中遇到 CSS 解析 CSS ,遇到 JS 执行JS。 为了提高解析效率，浏览器在解析前会启动一个与解析的过程，率先下载 HTML 中的 CSS 文件和外部的 JS文件。</p><p>如果主线程解析到 link 位置，此时外部的 CSS 文件还没有下载解析好，主线程不会等待，继续解析后续的HTML。这是因为下载和解析 CSS 的工作是在预解析线程中进行的。这就是 CSS 不会阻塞 HTML 解析的根本 原因。</p><p>如果主线程解析到 script 位置，会停止解析 HTML，转而等待 JS文件下载好，并将全局代码解析执行完成后，才能继续解析 HTML。这是因为 JS 代码的执行过程可能会修改当前的 DOM 树，所以 DOM 树的生成必须暂停。这就是JS会阻塞 HTML 解析的根本原因。</p><p>第一步完成后，会得到 DOM 树和 CSSOM 树，浏览器的默认样式、内部样式、外部样式、行内样式均会包含在CSSOM树中。</p><hr><h4 id="渲染的下一步是样式计算" tabindex="-1">渲染的下一步是样式计算 <a class="header-anchor" href="#渲染的下一步是样式计算" aria-label="Permalink to &quot;渲染的下一步是样式计算&quot;">​</a></h4><p>主线程会遍历 DOM 树，依次为树中的每一个节点计算样式，得到的最终结果称为 Computed Style，也就是计算样式。在这一过程中，会将一些预设值变为绝对值，例如 <code>em</code> 会变成 <code>px</code>, <code>red</code> 会变成 <code>rgb(256, 0, 0)</code>。</p><p>这一步结束后，就会得到一颗带有样式的 DOM 树。</p><hr><h4 id="接下来是布局-布局完成后会得到布局树" tabindex="-1">接下来是布局，布局完成后会得到布局树 <a class="header-anchor" href="#接下来是布局-布局完成后会得到布局树" aria-label="Permalink to &quot;接下来是布局，布局完成后会得到布局树&quot;">​</a></h4><p>布局阶段会依次遍历 DOM 树的每一个节点，计算每个节点的几何信息。例如节点的宽高、相对包含块的位置。</p><p>大部分时候，DOM 树和布局树并非一一对应</p><p>比如 <code>display:none</code> 的节点没有几何信息，因此不会生成到布局树;又比如使用了伪元素选择器，虽然 DOM树中不存在这些伪元素节点，但它们拥有几何信息，所以会生成到布局树中。还有匿名行盒、匿名块盒等等都会</p><p>导致 DOM 树和布局树无法一一对应。</p><p>( CSS中 <code>width: 100%</code> 的百分比是根据 <strong>包含块</strong> 的宽度计算的 )</p><hr><h4 id="下一步是分层" tabindex="-1">下一步是分层 <a class="header-anchor" href="#下一步是分层" aria-label="Permalink to &quot;下一步是分层&quot;">​</a></h4><p>主线程会使用一套复杂的策略对整个布局树中进行分层。</p><p>分层的好处在于，将来某一个层改变后，仅会对该层进行后续处理，从而提升效率。滚动条、堆叠上下文、transform、opacity 等样式都会或多或少的影响分层结果，也可以通过 <code>will-change</code> 属性更大程度的影响分层结果。</p><p>不要滥用 <code>will-change</code> 进行分层</p><hr><h4 id="再下一步是绘制" tabindex="-1">再下一步是绘制 <a class="header-anchor" href="#再下一步是绘制" aria-label="Permalink to &quot;再下一步是绘制&quot;">​</a></h4><p>主线程会为每个层单独产生绘制指令集，用于描述这一层的内容该如何画出来。</p><hr><p>完成绘制后，主线程将每个图层的绘制信息提交给合成线程，剩余工作将由合成线程完成。</p><p>合成线程首先对每个图层进行分块，将其划分为更多的小区域。</p><p>它会从线程池中拿取多个线程来完成分块工作。</p><hr><h4 id="分块完成后-进入光栅化阶段" tabindex="-1">分块完成后，进入光栅化阶段 <a class="header-anchor" href="#分块完成后-进入光栅化阶段" aria-label="Permalink to &quot;分块完成后，进入光栅化阶段&quot;">​</a></h4><p>合成线程会将块信息交给 GPU 进程，以极高的速度完成光栅化。</p><p>GPU 进程会开启多个线程来完成光栅化，并且优先处理靠近视口区域的块光栅化的结果，就是一块一块的位图</p><hr><h4 id="最后一个阶段就是画" tabindex="-1">最后一个阶段就是画 <a class="header-anchor" href="#最后一个阶段就是画" aria-label="Permalink to &quot;最后一个阶段就是画&quot;">​</a></h4><p>合成线程拿到每个层、每个块的位图后，生成一个个 quad 指引。</p><p>指引会标识出每个位图应该画到屏幕的哪个位置，以及会考虑到旋转、缩放等变形。</p><p>变形发生在合成线程，与渲染主线程无关，这就是 transform 效率高的本质原因。</p><p>合成线程会把 quad 提交给 GPU 进程，由 GPU 进程产生系统调用，提交给 GPU 硬件，完成最终的屏幕成像。</p>',46),d=[p];function h(i,n,s,c,l,b){return r(),a("div",null,d)}const S=e(t,[["render",h]]);export{m as __pageData,S as default};
